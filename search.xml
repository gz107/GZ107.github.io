<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>COF-databse整理</title>
    <url>/2023/02/27/cof-databse-zheng-li/</url>
    <content><![CDATA[<p>目前COF的研究非常火热，参考MOF数据库的成功建立，COF数据库近几年也有比较完善的建立。当前COF数据库主要分为实验合成和计算合成，以下分别总结了目前具有代表性的COF数据库：</p>
<hr>
<p>COF Database:</p>
<p>[1] hypoCOFs 数据库目前已更新到第三版本，V3版本包括69840个计算合成的COF结构</p>
<p>网址链接：<a class="link" href="https://archive.materialscloud.org/record/2018.0003/v3">https://archive.materialscloud.org/record/2018.0003/v3<i class="fas fa-external-link-alt"></i></a>&nbsp;</p>
<p>Reference：</p>
<p>D. Ongari, A.V. Yakutovich, L. Talirz, B. Smit.Building a consistent and reproducible database for adsorption evaluation in covalent-organic frameworks</p>
<p>Mater. Cloud Arch., 100 (2021), p. 2021</p>
<p>R. Mercado, R.-S. Fu, A.V. Yakutovich, L. Talirz, M. Haranczyk, B. Smit .In silico design of 2D and 3D covalent organic frameworks for methane storage applications</p>
<p>Mater. Cloud Arch., 0003/v3 (2018), p. 2018</p>
<p>[2]北化工团队基于材料基因计算合成的COF数据库，GCOFs database包括471,990结构，其中 包括166,684 2D-COFs 和 305,306 3D-COFs .</p>
<p>网址链接：<a class="link" href="https://figshare.com/s/c7e3b7610a71b9d64210">https://figshare.com/s/c7e3b7610a71b9d64210<i class="fas fa-external-link-alt"></i></a></p>
<p>Reference：</p>
<p>Lan, Y., Han, X., Tong, M.&nbsp;et al.&nbsp;Materials genomics methods for high-throughput&nbsp;construction of COFs and targeted synthesis.&nbsp;Nat Commun&nbsp;9, 5274 (2018). <a class="link" href="https://doi.org/10.1038/s41467-018-07720-x">https://doi.org/10.1038/s41467-018-07720-x<i class="fas fa-external-link-alt"></i></a></p>
<hr>
<p>实验合成</p>
<p>[1] CoRe-COFs数据库目前更新到第六版本，V6版本包括613个COF结构，</p>
<p>网址链接：<a class="link" href="https://github.com/core-cof/CoRE-COF-Database">https://github.com/core-cof/CoRE-COF-Database<i class="fas fa-external-link-alt"></i></a></p>
<p>Reference：</p>
<p>Minman Tong, Youshi Lan, Qingyuan Yang, and Chongli Zhong, Exploring the structure-property relationships of covalent organic frameworks for noble gas separations.&nbsp;Chem. Eng. Sci.&nbsp;2017, 168, 456-464.</p>
<p>[2]CURATED COFs数据库目前已更新到第九版本(June 2021)，V9版本包括648个COF结构.</p>
<p>其中CURATED&nbsp;指的是：Clean, Uniform, Refined with Automatic Tracking from Experimental Database”&nbsp;</p>
<p>网址链接：<a class="link" href="https://www.materialscloud.org/discover/curated-cofs#mcloudHeader">https://www.materialscloud.org/discover/curated-cofs#mcloudHeader<i class="fas fa-external-link-alt"></i></a></p>
<p>Reference：</p>
<p>Daniele Ongari, Aliaksandr V. Yakutovich, Leopold Talirz, Berend Smit,&nbsp;Building a consistent and reproducible database for adsorption evaluation in Covalent-Organic Frameworks, Materials Cloud Archive&nbsp;2021.100&nbsp;(2021), doi:&nbsp;10.24435/materialscloud:z6-jn. </p>
]]></content>
      <categories>
        <category>Research</category>
      </categories>
      <tags>
        <tag>COF;Database;</tag>
      </tags>
  </entry>
  <entry>
    <title>get unitcell in molecular simulation from cif file</title>
    <url>/2023/03/02/get-unitcell/</url>
    <content><![CDATA[<p>#—————————–#<br>#Function: get unitcell in molecular simulation from cif file.<br>#Author: Zheng<br>#Data:2023.3.2<br>#—————————–$<br>import os<br>from pandas import read_excel<br>from pandas import DataFrame<br>import pandas as pd<br>import math</p>
<p>def get_unit_cell(cif_location, cutoff):</p>
<pre><code>with open(cif_location, 'rb') as f:
    text = f.readlines()
for i in text:
    if (i.startswith(bytes('_cell_length_a', encoding="utf8"))):
        i = str(i, encoding="utf-8")
        a = float(i.split()[-1].strip().split('(')[0])
    elif (i.startswith(bytes('_cell_length_b', encoding="utf8"))):
        i = str(i, encoding="utf-8")
        b = float(i.split()[-1].strip().split('(')[0])
    elif (i.startswith(bytes('_cell_length_c', encoding="utf8"))):
        i = str(i, encoding="utf-8")
        c = float(i.split()[-1].strip().split('(')[0])
    elif (i.startswith(bytes('_cell_angle_alpha', encoding="utf8"))):
        i = str(i, encoding="utf-8")
        alpha = float(i.split()[-1].strip().split('(')[0])
    elif (i.startswith(bytes('_cell_angle_beta', encoding="utf8"))):
        i = str(i, encoding="utf-8")
        beta = float(i.split()[-1].strip().split('(')[0])
    elif (i.startswith(bytes('_cell_angle_gamma', encoding="utf8"))):
        i = str(i, encoding="utf-8")
        gamma = float(i.split()[-1].strip().split('(')[0])
        break
pi = 3.1415926

a_length = a * math.sin(beta / 180 * pi)
b_length = b * math.sin(gamma / 180 * pi)
c_length = c * math.sin(alpha / 180 * pi)

a_unitcell = int(2 * cutoff / a_length + 1)
b_unitcell = int(2 * cutoff / b_length + 1)
c_unitcell = int(2 * cutoff / c_length + 1)

return [a_unitcell,b_unitcell,c_unitcell]
</code></pre>
<p>cutoff = 12.0   #define cutoff value<br>dir_location=’E:\MOF\2019-07-01-ASR-public_12020\structure_11660’  #cif file location<br>cif_list=os.listdir(dir_location)<br>tot_name=[“Filename”,”a_unitcell”,”b_unitcell”,”c_unitcell”]<br>OUT = [];<br>for i in cif_list:<br>    cif_location=dir_location+’\‘+i<br>    uuu =get_unit_cell(cif_location,cutoff);<br>    n0 = len(uuu);<br>    uu = [i];<br>    for j in uuu:<br>        uu.append(j);<br>    OUT.append (uu)</p>
<p>zaa = pd.DataFrame(OUT,columns=tot_name)<br>zaa.to_excel(‘MOF_cutoff.xlsx’,index = False)</p>
]]></content>
      <categories>
        <category>Research</category>
      </categories>
      <tags>
        <tag>molecular simulation；</tag>
      </tags>
  </entry>
  <entry>
    <title>Strat</title>
    <url>/2023/02/23/first-blog/</url>
    <content><![CDATA[<p>It’s my first Blog, so let’s start a whole new journey!科学网博客的注册实在让我无力吐槽，经过一晚上的学习，终于打开了一个全新的世界，github+Hexo自主搭建blog的感觉很nice. </p>
]]></content>
      <tags>
        <tag>essay；</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/02/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link" href="https://hexo.io/">Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link" href="https://hexo.io/docs/">documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link" href="https://github.com/hexojs/hexo/issues">GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
</code></pre>
<p>More info: <a class="link" href="https://hexo.io/docs/writing.html">Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server
</code></pre>
<p>More info: <a class="link" href="https://hexo.io/docs/server.html">Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate
</code></pre>
<p>More info: <a class="link" href="https://hexo.io/docs/generating.html">Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy
</code></pre>
<p>More info: <a class="link" href="https://hexo.io/docs/one-command-deployment.html">Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
  </entry>
</search>
